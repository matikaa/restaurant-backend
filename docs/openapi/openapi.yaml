openapi: 3.0.3
info:
  title: Restaurant server
  description: ""
  version: 1.0.0
tags:
  - name: categories
    description: All available requests related to categories
  - name: users
    description: All available requests related to users
paths:
  /categories:
    get:
      tags:
        - categories
      summary: Get all categories
      description: |
        Get all available categories

      operationId: getCategories
      responses:
        '200':
          description: Categories were fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  categoryResponses:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryResponse'

    post:
      tags:
        - categories
      summary: Add a new category
      description: |
        Add a new category
        
        Allowed roles: ```ADMIN```
      operationId: addCategory
      requestBody:
        description: Create a new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      responses:
        '201':
          description: Category was saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryRequestResponse'
        '400':
          description: Category with given position already exists
        '404':
          description: Category could not be saved

  /categories/{categoryId}:
    get:
      tags:
        - categories
      summary: Get single category
      description: Get a single category by categoryId
      operationId: getCategory
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the category
      responses:
        '200':
          description: Category was fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Category was not found
    delete:
      tags:
        - categories
      summary: Delete a category
      description: |
        Delete a category
        
        Allowed roles: ```ADMIN```
      operationId: deleteCategory
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the category
      responses:
        '200':
          description: Category was deleted successfully
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: Category was not found
    put:
      tags:
        - categories
      summary: Update a category
      description: |
        Update a category
        
        Allowed roles: ```ADMIN```
      operationId: updateCategory
      requestBody:
        description: Update a category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
        required: true
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: ID of the category
      responses:
        '200':
          description: Category was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: Category was not found

  /categories/{categoryId}/food:
    get:
      tags:
        - food
      summary: Get food related to category
      description: |
        Get food by categoryId

      operationId: getFood
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: ID of the category
      responses:
        '200':
          description: Food was fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  foodResponses:
                    type: array
                    items:
                      $ref: '#/components/schemas/FoodResponse'
    post:
      tags:
        - food
      summary: Post a new food related to category
      description: |

        Allowed roles: ```ADMIN```
      operationId: postFood
      requestBody:
        description: Create a new dish with existing category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodRequest'
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: ID of the category
      responses:
        '201':
          description: Food was added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodRequestResponse'
          headers:
            Content-Type:
              schema:
                type: string
                example: "application/json"
              description: One of multiple possible Content-Type headers
        '400':
          description: Food with this position already exists
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: Category or food was not found

  /categories/food:
    post:
      tags:
        - food
      summary: Get food related to name
      description: |
        Get food by food name

      operationId: getFoodByFoodName
      requestBody:
        description: Request body to find food by name and price
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodNameAndPrice'
      responses:
        '200':
          description: Food was fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodResponse'

  /categories/{categoryId}/food/{foodId}:
    get:
      tags:
        - food
      summary: Get a single food related to category
      description: |
        Get a single food by foodId and categoryId

      operationId: getFoodByFoodId
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: ID of the category
        - in: path
          name: foodId
          schema:
            type: integer
          required: true
          description: ID of food
      responses:
        '200':
          description: Food was fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodResponse'
        '404':
          description: Food was not found
    put:
      tags:
        - food
      summary: Update a single food related to category
      description: |

        Allowed roles: ```ADMIN```
      operationId: updateFood
      requestBody:
        description: Update food
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodRequestUpdate'
        required: true
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: ID of the category
        - in: path
          name: foodId
          schema:
            type: integer
          required: true
          description: ID of food
      responses:
        '200':
          description: Food was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodResponse'
        '400':
          description: Food with this position already exists
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: Food was not found
    delete:
      tags:
        - food
      summary: Delete a single food related to category
      description: |

        Allowed roles: ```ADMIN```
      operationId: deleteFood
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: ID of the category
        - in: path
          name: foodId
          schema:
            type: integer
          required: true
          description: ID of food
      responses:
        '200':
          description: Food was deleted successfully
        '404':
          description: Food was not found

  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: |
        **Get all users**
        
        Allowed roles: ```ADMIN```
      operationId: getUsers
      responses:
        '200':
          description: Users were fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userResponses:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '403':
          description: User does not have permissions to access that resource
    post:
      tags:
        - users
      summary: Register a new user
      description: |
        **Add a new user**

      operationId: addUser
      requestBody:
        description: Enter user details in order to add a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '201':
          description: User was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRequestResponse'
        '400':
          description: Wrong email
        '409':
          description: User already exists

  /users/{userId}/password:
    put:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Change any user password by admin
      description: |
        **Change password by admin**

        Allowed roles: ```ADMIN```
      operationId: changeAnyUserPassword
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      requestBody:
        description: Enter current and new password by user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangePasswordRequest'
        required: true
      responses:
        '200':
          description: Password changed
        '403':
          description: User does not have permissions to access that resource

  /users/{userId}/delete:
    post:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Delete user account by admin
      description: |
        **Change user details**

        Allowed roles: ```ADMIN```
      operationId: deleteUserByAdmin
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: User was deleted successfully
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: User was not found

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get single user
      description: |
        **Get single user**
        
        Allowed roles: ```ADMIN```
      operationId: getUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: User was fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: User not exists

  /users/{userId}/role:
    get:
      tags:
        - users
      summary: Get single user role
      description: |
        **Get single user role**
        
        Allowed roles: ```ADMIN```, ```USER```
      operationId: getUserRole
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: User was fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: User not exists

  /users/login:
    post:
      tags:
        - users
      summary: Login user
      description: |
        **Logging of user**

      operationId: login
      requestBody:
        description: Enter user details in order to add a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: User was fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRequestResponse'
        '404':
          description: Wrong email or password

  /users/logout:
    post:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Logout user
      description: |
        **Logging out of user**

        Allowed roles: ```ADMIN```, ```USER```
      operationId: logout
      responses:
        '200':
          description: User was fetched successfully
        '403':
          description: User does not have permissions to access that resource

  /users/password:
    put:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Change password
      description: |
        **Change password by user**

        Allowed roles: ```ADMIN```, ```USER```
      operationId: changePassword
      requestBody:
        description: Enter current and new password by user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        '200':
          description: Password changed
        '403':
          description: User does not have permissions to access that resource
        '409':
          description: Wrong password or new is the same as old

  /users/me:
    put:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Change user details
      description: |
        **Change user details**

        Allowed roles: ```ADMIN```, ```USER```
      operationId: updateUserDetails
      requestBody:
        description: Change name, address, phone.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        '200':
          description: User was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          description: User does not have permissions to access that resource

    post:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Delete user account
      description: |
        **Change user details**

        Allowed roles: ```USER```
      operationId: deleteAccount
      requestBody:
        description: Confirm user by password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
        required: true
      responses:
        '200':
          description: User was deleted successfully
        '400':
          description: Wrong password
        '403':
          description: User does not have permissions to access that resource

  /users/{userId}/balance:
    put:
      security:
        - bearerAuth: []
      tags:
        - users
      summary: Change user balance
      description: |
        **Change user balance**

        Allowed roles: ```ADMIN```
      operationId: changeAnyUserAccountBalance
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      requestBody:
        description: Change balance.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMoney'
        required: true
      responses:
        '200':
          description: User was updated successfully
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: User not exists

    get:
      tags:
        - users
      summary: Get single user balance account
      description: |
        **Get single user**
        
        Allowed roles: ```ADMIN```, ```USER```
      operationId: getCurrentUserBalance
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: User was fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMoney'
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: User not exists

  /contact:
    post:
      tags:
        - contact
      summary: Request for adding contact
      description: |
        Add contact of company

        Allowed roles: ```ADMIN```
      operationId: addContact
      requestBody:
        description: add contact of company
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
      responses:
        '201':
          description: Contact created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactRequestResponse'
        '400':
          description: Contact already exists
        '403':
          description: User does not have permissions to access that resource

  /contact/{contactId}:
    get:
      tags:
        - contact
      summary: Get contact
      description: |
        **Get contact of company**

      operationId: getContact
      parameters:
        - in: path
          name: contactId
          schema:
            type: integer
          required: true
          description: ID of the contact
      responses:
        '200':
          description: Contact was fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '404':
          description: Contact was not found

    delete:
      tags:
        - contact
      summary: Delete contact
      description: |
        Delete contact
        
        Allowed roles: ```ADMIN```
      operationId: deleteContact
      parameters:
        - in: path
          name: contactId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the contact
      responses:
        '200':
          description: Contact was deleted successfully
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: Contact was not found
    put:
      tags:
        - contact
      summary: Update contact
      description: |
        Update contact
        
        Allowed roles: ```ADMIN```
      operationId: updateContact
      requestBody:
        description: Update contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        required: true
      parameters:
        - in: path
          name: contactId
          schema:
            type: integer
          required: true
          description: ID of the contact
      responses:
        '200':
          description: Contact was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: Contact was not found

  /categories/{categoryId}/food/{foodId}/order:
    put:
      tags:
        - cart
      summary: Add to order
      description: |
        Add food to order
        
        Allowed roles: ```ADMIN```,```USER```
      operationId: addToOrder
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: ID of the category
        - in: path
          name: foodId
          schema:
            type: integer
          required: true
          description: ID of the food
      responses:
        '200':
          description: Food was added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '402':
          description: Not enough money to buy
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: Food with category was not found
        '409':
          description: Order is in delivery

    post:
      tags:
        - cart
      summary: Delete food from order
      description: |
        Delete food from order

        Allowed roles: ```ADMIN```,```USER```
      operationId: deleteFromOrder
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: ID of the category
        - in: path
          name: foodId
          schema:
            type: integer
          required: true
          description: ID of the food
      responses:
        '200':
          description: Food successfully deleted from order
        '400':
          description: Food does not exists in order
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: Food with category was not found
        '409':
          description: Cart is empty

  /users/{userId}/cart/order:
    put:
      tags:
        - cart
      summary: Confirm order
      description: |
        Confirm order to delivery
        
        Allowed roles: ```ADMIN```,```USER```
      operationId: confirmOrder
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: Order was confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '403':
          description: User does not have permissions to access that resource
        '404':
          description: Cart is empty

    post:
      tags:
        - cart
      summary: Confirm delivery
      description: |
        Confirm delivery of order

        Allowed roles: ```ADMIN```,```USER```
      operationId: confirmDelivery
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: Order successfully delivered
        '403':
          description: User does not have permissions to access that resource
        '409':
          description: There is not delivery to confirm

    get:
      tags:
        - cart
      summary: Get current order
      description: |
        Get current user's order

        Allowed roles: ```ADMIN```,```USER```
      operationId: getCurrentUserOrder
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: Order was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '403':
          description: User does not have permissions to access that resource
        '409':
          description: Cart is empty

    delete:
      tags:
        - cart
      summary: Cancel order
      description: |
        Cancel current user's order

        Allowed roles: ```ADMIN```,```USER```
      operationId: cancelOrder
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: Order was successfully deleted
        '403':
          description: User does not have permissions to access that resource
        '409':
          description: There is not order to delete

  /users/{userId}/cart/order_in_delivery:
    get:
      tags:
        - cart
      summary: Get in delivery order
      description: |
        Get in delivery user's order

        Allowed roles: ```ADMIN```,```USER```
      operationId: getInDeliveryUserOrder
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: Order was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '403':
          description: User does not have permissions to access that resource
        '409':
          description: Cart is empty

  /orders:
    get:
      tags:
        - cart
      summary: Get all done orders
      description: |
        Get all done orders

        Allowed roles: ```ADMIN```
      operationId: getAllSortedAndSoldFood
      responses:
        '200':
          description: Orders were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartStatisticResponse'
        '403':
          description: User does not have permissions to access that resource

  /users/{userId}/order:
    get:
      tags:
        - cart
      summary: Get all orders
      description: |
        Get all user's orders

        Allowed roles: ```ADMIN```,```USER```
      operationId: getAllUserOrders
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      responses:
        '200':
          description: Orders were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDeliveredResponse'
        '403':
          description: User does not have permissions to access that resource


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    CategoryRequest:
      type: object
      properties:
        positionId:
          type: integer
          format: int64
          example: 5
        categoryName:
          type: string
          example: 'Main dishes'

    UpdateCategoryRequest:
      type: object
      properties:
        positionId:
          type: integer
          format: int64
          example: 5
        categoryName:
          type: string
          example: 'Main dishes'

    CategoryResponse:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
          example: 5
        positionId:
          type: integer
          format: int64
          example: 5
        categoryName:
          type: string
          example: "Main dishes"

    CategoryRequestResponse:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
          example: 1
        positionId:
          type: integer
          format: int64
          example: 5
        categoryName:
          type: string
          example: "Main dishes"

    CartDeliveredResponse:
      type: object
      properties:
        overallCartValue:
          type: number
          example: 150
        cartResponses:
          type: array
          items:
            $ref: '#/components/schemas/CartResponse'

    CartStatisticResponse:
      type: object
      properties:
        value:
          type: number
          example: 60
        soldFoodSummaries:
          type: array
          items:
            $ref: '#/components/schemas/SoldFoodSummaryResponse'

    CartResponse:
      type: object
      properties:
        cartValue:
          type: number
          example: 50
        food:
          type: array
          items:
            type: string
            example: steak
        foodPrice:
          type: array
          items:
            type: number
            example: 54

    SoldFoodSummaryResponse:
      type: object
      properties:
        foodName:
          type: string
          example: "Bruschetta"
        price:
          type: integer
          example: 20
        quantitySold:
          type: integer
          example: 3
        totalValue:
          type: integer
          example: 60
        categoryId:
          type: integer
          example: 2
        categoryName:
          type: string
          example: "Starters"
        positionId:
          type: integer
          example: 1

    ContactResponse:
      type: object
      properties:
        contactMail:
          type: string
          example: 'company@temp.pl'
        contactPhoneNumber:
          type: string
          example: '509283543'
        openingHoursDays:
          type: string
          example: 'pon-sb'
        openingHoursOpenTime:
          type: string
          format: time
          example: '9.00'
        openingHoursCloseTime:
          type: string
          format: time
          example: '22.00'
        addressCity:
          type: string
          example: "Warszawa"
        addressStreet:
          type: string
          example: "Zlota"
        addressNumber:
          type: number
          example: 43

    ContactRequestResponse:
      type: object
      properties:
        contactId:
          type: integer
          example: 1
        contactMail:
          type: string
          example: 'company@temp.pl'
        contactPhoneNumber:
          type: string
          example: '509283543'
        openingHoursDays:
          type: string
          example: 'pon-sb'
        openingHoursOpenTime:
          type: string
          format: time
          example: '9.00'
        openingHoursCloseTime:
          type: string
          format: time
          example: '22.00'
        addressCity:
          type: string
          example: "Warszawa"
        addressStreet:
          type: string
          example: "Zlota"
        addressNumber:
          type: number
          example: 43

    UserRequest:
      type: object
      properties:
        email:
          type: string
          example: 'acso@temp.pl'
        name:
          type: string
          example: 'Krystian'
        password:
          type: string
          example: 'mero314$'
        address:
          type: string
          example: 'ul. Kosciuszki 20, 90-001 Lodz'
        phoneNumber:
          type: string
          example: '502578994'

    UserRequestResponse:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        email:
          type: string
          example: 'acso@temp.pl'
        name:
          type: string
          example: 'Krystian'
        createdTime:
          type: string
          format: data-time
          example: '2023-05-26T10:20:30'
        role:
          type: string
          example: 'User'
        address:
          type: string
          example: 'ul. Kosciuszki 20, 90-001 Lodz'
        phoneNumber:
          type: string
          example: '502578994'
        money:
          type: integer
          example: 132
        loyaltyCard:
          type: boolean
          example: true

    UserResponse:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        email:
          type: string
          example: 'acso@temp.pl'
        name:
          type: string
          example: 'Krystian'
        createdTime:
          type: string
          format: data-time
          example: '2023-05-26T10:20:30'
        role:
          type: string
          example: 'User'
        address:
          type: string
          example: 'ul. Kosciuszki 20, 90-001 Lodz'
        phoneNumber:
          type: string
          example: '502578994'
        money:
          type: integer
          example: 132
        loyaltyCard:
          type: boolean
          example: true

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: 'acso@temp.pl'
        password:
          type: string
          example: 'das#@f$fFFa!'

    LoginRequestResponse:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJyYXpAYWRtaW4ucGwiLCJpYXQiOjE2OTQ3MTk2NjYsImV4cCI6MTY5NDcyMTQ2Nn0.Xy_BHY2pbctM3GfWKywEkRJDJiO4Jq8-84H-ZSETGps'

    ChangePasswordRequest:
      type: object
      properties:
        currentPassword:
          type: string
          example: 'asdo12##'
        newPassword:
          type: string
          example: 'PL039fad!#5gG'

    UserChangePasswordRequest:
      type: object
      properties:
        newPassword:
          type: string
          example: 'PL039fad!#5gG'

    PasswordRequest:
      type: object
      properties:
        password:
          type: string
          example: 'asdo12##'

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Mario'
        address:
          type: string
          example: 'Aleje politechniki 13, 90-508 Lodz'
        phoneNumber:
          type: string
          example: '532805003'

    UserMoney:
      type: object
      properties:
        money:
          type: integer
          format: int64
          example: 3

    UserRole:
      type: object
      properties:
        role:
          type: string
          example: 'USER'

    FoodResponse:
      type: object
      properties:
        foodId:
          type: integer
          format: int64
          example: 3
        categoryId:
          type: integer
          format: int64
          example: 3
        positionId:
          type: integer
          format: int64
          example: 4
        foodName:
          type: string
          example: 'French fries'
        foodPrice:
          type: integer
          example: 12

    FoodRequest:
      type: object
      properties:
        positionId:
          type: integer
          format: int64
          example: 3
        foodName:
          type: string
          example: 'French fries'
        foodPrice:
          type: integer
          example: 12

    FoodNameAndPrice:
      type: object
      properties:
        foodName:
          type: string
          example: 'French fries'
        foodPrice:
          type: integer
          format: int64
          example: 12

    FoodRequestUpdate:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
          example: 3
        positionId:
          type: integer
          format: int64
          example: 3
        foodName:
          type: string
          example: 'French fries'
        foodPrice:
          type: integer
          example: 12

    FoodRequestResponse:
      type: object
      properties:
        foodId:
          type: integer
          format: int64
          example: 2
        categoryId:
          type: integer
          format: int64
          example: 3
        positionId:
          type: integer
          format: int64
          example: 3
        foodName:
          type: string
          example: 'French fries'
        foodPrice:
          type: integer
          example: 12

    ContactRequest:
      type: object
      properties:
        contactMail:
          type: string
          example: 'company@temp.pl'
        contactPhoneNumber:
          type: string
          example: '509283543'
        openingHoursDays:
          type: string
          example: 'pon-sb'
        openingHoursOpenTime:
          type: string
          format: time
          example: '9.00'
        openingHoursCloseTime:
          type: string
          format: time
          example: '22.00'
        addressCity:
          type: string
          example: "Warszawa"
        addressStreet:
          type: string
          example: "Zlota"
        addressNumber:
          type: number
          example: 43

servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MARCINFREJNAGEL11/restaurant/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/240699/restaurant/1.0.0